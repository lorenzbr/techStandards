5               reasons for validating standards 5.1             problems commonly found by validating standards the purpose of a standard is to specify requirements that are to be met by systems implementing the standard. these requirements need to be unambiguous, precise and consistent. standards should follow established principles of standards writing, as follows: •     a well-defined and precise terminology should be used consistently in the standard.  •     requirements should be clearly identified as mandatory or optional.  •     different configurations and their associated parameters should be well-defined.  •     the means of conforming to the standard should be clearly identified.  and •     definitions and requirements should not conflict with each other. even a simple validation of a standard will identify specification errors that can be easily rectified and that, when corrected, will improve the overall quality of the document. such improvements make the standard easier to understand and to implement in a product, thus reducing the number of potential interoperability problems that might occur. problems found during validation fall into two distinct, though often related, categories which are: •     editorial.  and •     technical. inconsistencies and other problems in a standard can result from: •     distributed, cooperative authorship of a standard.  •     the separation of a standard into multiple parts.  •     the evolution of a standard through different revisions.  10                         etsi eg 201 015 v2.1.1 (2012-02) •     the use of multiple specification techniques within the standard. the resultant synchronization and consistency problems may potentially lead to different interpretations of the standard. 5.1.1          editorial issues editorial problems in a standard may seem to be trivial issues but, if it is poorly expressed or presented, an otherwise excellent requirement can cause confusion to implementers. the result of this is likely to be products which are supposedly standardized but which are unable to interoperate with other similar products. problems associated with the editorial correctness of a standard include the following: •     missing or out-of-date references to other standards -     the documents identified as normative references in clause 2 of a standard are considered to be part of the standard itself. if the correct standards are not included in this clause or the reference information is out-of-date then associated requirement(s) can be inaccurate or misleading. •     insufficient, conflicting or incorrect abbreviations and definitions of terms -     clear definitions of terms are important in ensuring that the standard can be understood in the same way by all readers. incorrectly specified or missing abbreviations can cause confusion, at best, and misinterpretation at worst. •     requirements poorly expressed in english so that they are difficult to understand -     although the guidelines for the use of modal verbs ('shall', 'should', 'may') in standards are very clearly specified [i.16] and understood, they do not prevent requirements from being constructed in a way that is difficult to interpret unambiguously. •     incorrect syntax used in specification languages (graphic or textual) -     languages and notations such as asn.1 and msc can make the requirements in a standard completely unambiguous. however, if the syntax of such specifications is not correct (i.e. not checked) then they lose their precision and are open to varying interpretations. 5.1.2          technical issues although likely to be more damaging than editorial problems, inaccuracies in the technical specification are generally less common in standards. it is, nevertheless, still important to find and correct such problems. examples of the specification problems include: •     requirements that are incomplete or omitted from the specification example 1:         when an implementation receives a request message containing a value of less than 10 in the count field it shall respond with a valid_request message to the sender. if the value of the count field is greater than 10, it shall respond to the sender with an invalid_request message. the wording of the requirement means that the processing of count values less than 10 and values greater than 10 are specified but there is no specification for how a value of exactly 10 is to be handled. •     requirements that are implied rather than expressly specified -     if there is more than one requirement tied together in a single statement, this can lead to confusion and misinterpretation. 11                          etsi eg 201 015 v2.1.1 (2012-02) example 2:        when an implementation sends a call_proceeding message to the calling party it shall also forward the setup message to the destination. although this requirement is not wrong, it does not tell the full story as the initial stimulus is implied (the setup is forwarded so must have been received) but not clearly specified. a more complete formulation would be: when an implementation receives a setup message from the calling party, it shall respond with a call_proceeding message back to the calling party and also forward the setup to the destination. •    requirements that conflict with other requirements in the same or a referenced standard -     a statement that requires an implementation to take a particular course of action at one point in a standard clearly conflicts with a requirement elsewhere not to take the same course of action. however, a requirement that mandates an action using a 'shall' is equally in conflict with a requirement elsewhere that allows that same action to be optional by using 'may'. •    incorrect semantics used in a specification language -     a specification in a language such as asn.1 or uml may be syntactically correct (and, thus, pass through a compiler) while expressing incorrect semantics. most language compilers will detect errors in the static semantics of a specification but simulation or live operation may be required to detect errors in the dynamic semantics. •    requirements that cannot be achieved practically -     requirements that demand behaviour that cannot be met within the practical constraints of cost and physics will result in implementations that take a best effort approach and, consequently, are unlikely to comply with conformance tests or interoperate with other implementations. •    requirements that specify unnecessary restrictions on the implementation of the standard (over-engineering) -     standards should limit their requirements to the specification of observable behaviour at external interfaces. they should specify what is to be observed but not how that should be achieved. •    large numbers of implementation options which may result in incompatible implementations -     implementations of standards that specify a large number of optional requirements are likely to experience significant problems in interoperating. ideally, a standard should specify no options but in most cases, this is impractical. options should, therefore be kept to a minimum. 5.2           avoiding problems normally found during validation many of the problems found during validation can be avoided by following simple procedures during the standards development process. activities which can help to avoid common problems in standards include the use of: •    guidelines for structuring and writing a standard [i.16].  •    guidelines for using modelling techniques for the technical parts of the standard [i.1], [i.2].  •    the use of profile standards to constrain the number of options in a base standard when used in a specific application environment.  •    checklists for analysing the correct writing of a standard.  •    continuous reviews and feedback during standards writing.  and •    validation throughout the development of a standard. one of the simplest methods for ensuring that each requirement in a standard is, at least, valid is to ask the question 'can the requirement be tested?' if the answer to this question is 'no' then it is unlikely that the requirement should be included in the standard. 12                         etsi eg 201 015 v2.1.1 (2012-02) 5.3             using validation methods to detect problems the use of even the simplest validation techniques during standards development will help to identify inconsistencies, inaccuracies and other defects which can be resolved before publication and, thus, improve the quality of the output document. there are a range of techniques described in the present document and these will be most effective if used regularly at all stages of the development process.
